/*
 * Copyright (C) 2016 MediaTek Inc.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See http://www.gnu.org/licenses/gpl-2.0.html for more details.
 */

#ifndef __LAYERING_RULE__
#define __LAYERING_RULE__

#include "layering_rule_base.h"

#define MAX_PHY_OVL_CNT 12
#define HAS_LARB_HRT
#define PARTIAL_L0_YUV_ONLY
#define PARTIAL_PMA_L0_YUV_ONLY
#define RSZ_SCALE_RATIO_ROLLBACK

enum HRT_LEVEL {
	HRT_LEVEL_LEVEL0 = 0,
	HRT_LEVEL_LEVEL1,
	HRT_LEVEL_LEVEL2,
	HRT_LEVEL_LEVEL3,
	HRT_LEVEL_NUM,
};


enum HRT_TB_TYPE {
	HRT_TB_TYPE_GENERAL = 0,
	HRT_TB_TYPE_DUAL_DISP,
	HRT_TB_TYPE_PARTIAL_RESIZE,
	HRT_TB_TYPE_PARTIAL_RESIZE_PMA,
	HRT_TB_TYPE_MULTI_WINDOW_TUI,
	HRT_TB_NUM,
};

enum {
	HRT_LEVEL_DEFAULT = HRT_LEVEL_NUM + 1,
};

enum HRT_BOUND_TYPE {
	HRT_BOUND_TYPE_2K_2CHANNEL = 0,
	HRT_BOUND_TYPE_2K_DUAL_2CHANNEL,
	HRT_BOUND_TYPE_FHD_2CHANNEL,
	HRT_BOUND_TYPE_2K_4CHANNEL,
	HRT_BOUND_TYPE_2K_DUAL_4CHANNEL,
	HRT_BOUND_TYPE_FHD_4CHANNEL,
	HRT_BOUND_TYPE_120HZ,
	HRT_BOUND_TYPE_2K_2CHANNEL_E2, /*This is the base HRT bound for E2*/
	HRT_BOUND_TYPE_2K_DUAL_2CHANNEL_E2,
	HRT_BOUND_TYPE_FHD_2CHANNEL_E2,
	HRT_BOUND_TYPE_2K_4CHANNEL_E2,
	HRT_BOUND_TYPE_2K_DUAL_4CHANNEL_E2,
	HRT_BOUND_TYPE_FHD_4CHANNEL_E2,
	HRT_BOUND_NUM,
};

enum HRT_PATH_SCENARIO {
	HRT_PATH_GENERAL =
		MAKE_UNIFIED_HRT_PATH_FMT(HRT_PATH_RSZ_NONE, HRT_PATH_PIPE_SINGLE, HRT_PATH_DISP_SINGLE, 1),
	HRT_PATH_DUAL_PIPE =
		MAKE_UNIFIED_HRT_PATH_FMT(HRT_PATH_RSZ_NONE, HRT_PATH_PIPE_DUAL, HRT_PATH_DISP_SINGLE, 2),
	HRT_PATH_DUAL_DISP_MIRROR =
		MAKE_UNIFIED_HRT_PATH_FMT(HRT_PATH_RSZ_NONE, HRT_PATH_PIPE_SINGLE, HRT_PATH_DISP_DUAL_MIRROR, 3),
	HRT_PATH_DUAL_DISP_EXT =
		MAKE_UNIFIED_HRT_PATH_FMT(HRT_PATH_RSZ_NONE, HRT_PATH_PIPE_SINGLE, HRT_PATH_DISP_DUAL_EXT, 4),
	HRT_PATH_RESIZE_GENERAL =
		MAKE_UNIFIED_HRT_PATH_FMT(HRT_PATH_RSZ_GENERAL, HRT_PATH_PIPE_SINGLE, HRT_PATH_DISP_SINGLE, 5),
	HRT_PATH_RESIZE_PARTIAL =
		MAKE_UNIFIED_HRT_PATH_FMT(HRT_PATH_RSZ_PARTIAL, HRT_PATH_PIPE_SINGLE, HRT_PATH_DISP_SINGLE, 6),
	HRT_PATH_RESIZE_PARTIAL_PMA =
		MAKE_UNIFIED_HRT_PATH_FMT(HRT_PATH_RSZ_PARTIAL_PMA, HRT_PATH_PIPE_SINGLE, HRT_PATH_DISP_SINGLE, 7),
	HRT_PATH_DUAL_PIPE_RESIZE_GENERAL =
		MAKE_UNIFIED_HRT_PATH_FMT(HRT_PATH_RSZ_GENERAL, HRT_PATH_PIPE_DUAL, HRT_PATH_DISP_SINGLE, 8),
	HRT_PATH_DUAL_PIPE_RESIZE_PARTIAL =
		MAKE_UNIFIED_HRT_PATH_FMT(HRT_PATH_RSZ_PARTIAL, HRT_PATH_PIPE_DUAL, HRT_PATH_DISP_SINGLE, 9),
	HRT_PATH_DUAL_PIPE_RESIZE_PARTIAL_PMA =
		MAKE_UNIFIED_HRT_PATH_FMT(HRT_PATH_RSZ_PARTIAL_PMA, HRT_PATH_PIPE_DUAL, HRT_PATH_DISP_SINGLE, 10),
	HRT_PATH_DUAL_DISP_MIRROR_RESIZE_GENERAL =
		MAKE_UNIFIED_HRT_PATH_FMT(HRT_PATH_RSZ_GENERAL, HRT_PATH_PIPE_SINGLE, HRT_PATH_DISP_DUAL_MIRROR, 11),
	HRT_PATH_DUAL_DISP_MIRROR_RESIZE_PARTIAL =
		MAKE_UNIFIED_HRT_PATH_FMT(HRT_PATH_RSZ_PARTIAL, HRT_PATH_PIPE_SINGLE, HRT_PATH_DISP_DUAL_MIRROR, 12),
	HRT_PATH_DUAL_DISP_MIRROR_RESIZE_PARTIAL_PMA =
		MAKE_UNIFIED_HRT_PATH_FMT(HRT_PATH_RSZ_PARTIAL_PMA, HRT_PATH_PIPE_SINGLE,
		HRT_PATH_DISP_DUAL_MIRROR, 13),
	HRT_PATH_DUAL_DISP_EXT_RESIZE_GENERAL =
		MAKE_UNIFIED_HRT_PATH_FMT(HRT_PATH_RSZ_GENERAL, HRT_PATH_PIPE_SINGLE, HRT_PATH_DISP_DUAL_EXT, 14),
	HRT_PATH_DUAL_DISP_EXT_RESIZE_PARTIAL =
		MAKE_UNIFIED_HRT_PATH_FMT(HRT_PATH_RSZ_PARTIAL, HRT_PATH_PIPE_SINGLE, HRT_PATH_DISP_DUAL_EXT, 15),
	HRT_PATH_DUAL_DISP_EXT_RESIZE_PARTIAL_PMA =
		MAKE_UNIFIED_HRT_PATH_FMT(HRT_PATH_RSZ_PARTIAL_PMA, HRT_PATH_PIPE_SINGLE, HRT_PATH_DISP_DUAL_EXT, 16),
	HRT_PATH_UNKNOWN = MAKE_UNIFIED_HRT_PATH_FMT(0, 0, 0, 17),
	HRT_PATH_NUM = MAKE_UNIFIED_HRT_PATH_FMT(0, 0, 0, 18),
};

void layering_rule_init(void);

#endif
